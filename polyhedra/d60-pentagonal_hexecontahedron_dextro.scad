// pentagonal hexecontahedron (dextro)
//   coords via: http://dmccooey.com/polyhedra/RpentagonalHexecontahedron.html
//
use <polyhedra_primitives.scad>;

txt_depth = .12;
txt_size = .425;
txt_font = "Arial:style=Bold";
diameter = 42;   // distance from one vertex to the vertex opposite
minko = 0; //.2; // chamfer the edges [0 = disabled]
roll = 0; //.3;  // round by intersection with a smaller sphere [0 = disabled]
minkfn = 80;     //sets the $fn variable for chamfer and the sphere

// shape constants
phi = (1 + sqrt(5)) / 2;
x = pow((phi + sqrt(phi-5/27))/2, 1/3) + pow((phi - sqrt(phi-5/27))/2, 1/3);
C0  = phi * sqrt(3 - (x^2)) / 2;
C1  = phi * sqrt((x - 1 - (1/x)) * phi) / (2 * x);
C2  = phi * sqrt((x - 1 - (1/x)) * phi) / 2;
C3  = (x^2) * phi * sqrt(3 - (x^2)) / 2;
C4  = phi * sqrt(1 - x + (1 + phi) / x) / 2;
C5  = sqrt(x * (x + phi) + 1) / (2 * x);
C6  = sqrt((x + 2) * phi + 2) / (2 * x);
C7  = sqrt(-(x^2) * (2 + phi) + x * (1 + 3 * phi) + 4) / 2;
C8  = (1 + phi) * sqrt(1 + (1/x)) / (2 * x);
C9  = sqrt(2 + 3 * phi - 2 * x + (3/x)) / 2;
C10 = sqrt((x^2)*(392 + 225*phi) + x*(249 + 670*phi) + (470 + 157*phi))/62;
C11 = phi * sqrt(x * (x + phi) + 1) / (2 * x);
C12 = phi * sqrt((x^2) + x + 1 + phi) / (2 * x);
C13 = phi * sqrt((x^2) + 2 * x * phi + 2) / (2 * x);
C14 = sqrt((x^2) * (1 + 2 * phi) - phi) / 2;
C15 = phi * sqrt((x^2) + x) / 2;
C16 = (phi^3) * sqrt(x * (x + phi) + 1) / (2 * (x^2));
C17 = sqrt((x^2)*(617 + 842*phi) + x*(919 + 1589*phi) + (627 + 784*phi))/62;
C18 = (phi^2) * sqrt(x * (x + phi) + 1) / (2 * x);
C19 = phi * sqrt(x * (x + phi) + 1) / 2;
original_diameter = sqrt(3) * 1.5 + minko;
scaling_factor = diameter * 0.5 / original_diameter;

// balanced opposed faces
labels = ["1","40","51","55","9.","28","6.","33","52","21","60","10","44","15","32","58","30","4","57","31","3","29","46","17","39","48","5","54","2","35","26","59","7","56","13","22","23","50","18","36","8","47","42","12","37","27","45","20","16","41","34","24","19","49","14","25","53","11","43","38"];

vertices = [
 [  C0,   C1,  C19], [  C0,  -C1, -C19], [ -C0,  -C1,  C19], [ -C0,   C1, -C19],
 [ C19,   C0,   C1], [ C19,  -C0,  -C1], [-C19,  -C0,   C1], [-C19,   C0,  -C1],
 [  C1,  C19,   C0], [  C1, -C19,  -C0], [ -C1, -C19,   C0], [ -C1,  C19,  -C0],
 [ 0.0,   C5,  C18], [ 0.0,   C5, -C18], [ 0.0,  -C5,  C18], [ 0.0,  -C5, -C18],
 [ C18,  0.0,   C5], [ C18,  0.0,  -C5], [-C18,  0.0,   C5], [-C18,  0.0,  -C5],
 [  C5,  C18,  0.0], [  C5, -C18,  0.0], [ -C5,  C18,  0.0], [ -C5, -C18,  0.0],
 [ C10,  0.0,  C17], [ C10,  0.0, -C17], [-C10,  0.0,  C17], [-C10,  0.0, -C17],
 [ C17,  C10,  0.0], [ C17, -C10,  0.0], [-C17,  C10,  0.0], [-C17, -C10,  0.0],
 [ 0.0,  C17,  C10], [ 0.0,  C17, -C10], [ 0.0, -C17,  C10], [ 0.0, -C17, -C10],
 [  C3,  -C6,  C16], [  C3,   C6, -C16], [ -C3,   C6,  C16], [ -C3,  -C6, -C16],
 [ C16,  -C3,   C6], [ C16,   C3,  -C6], [-C16,   C3,   C6], [-C16,  -C3,  -C6],
 [  C6, -C16,   C3], [  C6,  C16,  -C3], [ -C6,  C16,   C3], [ -C6, -C16,  -C3],
 [  C2,   C9,  C15], [  C2,  -C9, -C15], [ -C2,  -C9,  C15], [ -C2,   C9, -C15],
 [ C15,   C2,   C9], [ C15,  -C2,  -C9], [-C15,  -C2,   C9], [-C15,   C2,  -C9],
 [  C9,  C15,   C2], [  C9, -C15,  -C2], [ -C9, -C15,   C2], [ -C9,  C15,  -C2],
 [  C7,   C8,  C14], [  C7,  -C8, -C14], [ -C7,  -C8,  C14], [ -C7,   C8, -C14],
 [ C14,   C7,   C8], [ C14,  -C7,  -C8], [-C14,  -C7,   C8], [-C14,   C7,  -C8],
 [  C8,  C14,   C7], [  C8, -C14,  -C7], [ -C8, -C14,   C7], [ -C8,  C14,  -C7],
 [  C4, -C12,  C13], [  C4,  C12, -C13], [ -C4,  C12,  C13], [ -C4, -C12, -C13],
 [ C13,  -C4,  C12], [ C13,   C4, -C12], [-C13,   C4,  C12], [-C13,  -C4, -C12],
 [ C12, -C13,   C4], [ C12,  C13,  -C4], [-C12,  C13,   C4], [-C12, -C13,  -C4],
 [ C11,  C11,  C11], [ C11,  C11, -C11], [ C11, -C11,  C11], [ C11, -C11, -C11],
 [-C11,  C11,  C11], [-C11,  C11, -C11], [-C11, -C11,  C11], [-C11, -C11, -C11]
];

faces = [
 [ 24,  0,  2, 14, 36], [ 24, 36, 72, 86, 76],
 [ 24, 76, 40, 16, 52], [ 24, 52, 64, 84, 60], [ 24, 60, 48, 12,  0],
 [ 25,  1,  3, 13, 37], [ 25, 37, 73, 85, 77],
 [ 25, 77, 41, 17, 53], [ 25, 53, 65, 87, 61], [ 25, 61, 49, 15,  1],
 [ 26,  2,  0, 12, 38], [ 26, 38, 74, 88, 78],
 [ 26, 78, 42, 18, 54], [ 26, 54, 66, 90, 62], [ 26, 62, 50, 14,  2],
 [ 27,  3,  1, 15, 39], [ 27, 39, 75, 91, 79],
 [ 27, 79, 43, 19, 55], [ 27, 55, 67, 89, 63], [ 27, 63, 51, 13,  3],
 [ 28,  4,  5, 17, 41], [ 28, 41, 77, 85, 81],
 [ 28, 81, 45, 20, 56], [ 28, 56, 68, 84, 64], [ 28, 64, 52, 16,  4],
 [ 29,  5,  4, 16, 40], [ 29, 40, 76, 86, 80],
 [ 29, 80, 44, 21, 57], [ 29, 57, 69, 87, 65], [ 29, 65, 53, 17,  5],
 [ 30,  7,  6, 18, 42], [ 30, 42, 78, 88, 82],
 [ 30, 82, 46, 22, 59], [ 30, 59, 71, 89, 67], [ 30, 67, 55, 19,  7],
 [ 31,  6,  7, 19, 43], [ 31, 43, 79, 91, 83],
 [ 31, 83, 47, 23, 58], [ 31, 58, 70, 90, 66], [ 31, 66, 54, 18,  6],
 [ 32,  8, 11, 22, 46], [ 32, 46, 82, 88, 74],
 [ 32, 74, 38, 12, 48], [ 32, 48, 60, 84, 68], [ 32, 68, 56, 20,  8],
 [ 33, 11,  8, 20, 45], [ 33, 45, 81, 85, 73],
 [ 33, 73, 37, 13, 51], [ 33, 51, 63, 89, 71], [ 33, 71, 59, 22, 11],
 [ 34, 10,  9, 21, 44], [ 34, 44, 80, 86, 72],
 [ 34, 72, 36, 14, 50], [ 34, 50, 62, 90, 70], [ 34, 70, 58, 23, 10],
 [ 35,  9, 10, 23, 47], [ 35, 47, 83, 91, 75],
 [ 35, 75, 39, 15, 49], [ 35, 49, 61, 87, 69], [ 35, 69, 57, 21,  9],
];

/*
// polyhedron rendered with labels and chamfering
render(labels, scaling_factor, vertices, faces, minko,
       original_diameter, roll, minkfn,
       txt_font, txt_size, txt_depth);
*/

scale(scaling_factor) {
    difference() {
        polyhedron(points=vertices, faces=faces, convexity=20);
        /*
        for(i=[0:len(faces)-1])
            facetext(facecoord(vertices, faces, i), labels[i], minko, 
                txt_font, txt_size, txt_depth);
        */
    }
}
